package com.rustyrazorblade.easycasslab

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue
import com.rustyrazorblade.easycasslab.configuration.User
import com.rustyrazorblade.easycasslab.core.YamlDelegate
import com.rustyrazorblade.easycasslab.output.OutputHandler
import io.github.oshai.kotlinlogging.KotlinLogging
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import java.io.File

data class Context(val easycasslabUserDirectory: File) : KoinComponent {
    var profilesDir = File(easycasslabUserDirectory, "profiles")

    // TODO allow for other profiles
    var profile = System.getenv("EASY_CASS_LAB_PROFILE") ?: "default"

    var profileDir = File(profilesDir, profile)
    val terraformCacheDir = File(easycasslabUserDirectory, "terraform_cache").also { it.mkdirs() }

    init {
        profileDir.mkdirs()
    }

    val log = KotlinLogging.logger {}

    /**
     * Version is either supplied by the in-repo script,
     * or the version generated by the application plugin
     */
    val version = System.getProperty("easycasslab.version")?.toInt() ?: 0
    val appHome = System.getProperty("easycasslab.apphome")
    val packerHome = "$appHome/packer/"
    val cassandraVersionsExtra = File(profileDir, "cassandra_versions")

    /**
     * Please use this for reading and writing yaml to objects
     *
     * Example usage:
     *
     * val state = mapper.readValue<MyStateObject>(json)
     */
    val yaml: ObjectMapper by YamlDelegate()

    // if you need to anything funky with the mapper (settings etc) use this
    fun getJsonMapper() = jacksonObjectMapper()

    private val userConfigFile = File(profileDir, "settings.yaml")

    // this will let us write out the yaml
    val userConfig by lazy {
        if (!userConfigFile.exists()) {
            log.debug { "$userConfigFile not found, going through interactive setup" }
            profilesDir.mkdirs()
            User.createInteractively(this, userConfigFile, outputHandler)
        }

        yaml.readValue<User>(userConfigFile)
    }

    // OutputHandler is still needed for user configuration
    private val outputHandler: OutputHandler by inject()

    val cwdPath = System.getProperty("user.dir")
    val home = File(System.getProperty("user.home"))
}
