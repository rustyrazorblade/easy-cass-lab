package com.rustyrazorblade.easycasslab

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.rustyrazorblade.easycasslab.core.YamlDelegate
import io.github.oshai.kotlinlogging.KotlinLogging
import org.koin.core.component.KoinComponent
import java.io.File

data class Context(
    val easycasslabUserDirectory: File,
    val isMcp: Boolean = false
) : KoinComponent {
    companion object {
        /**
         * Create a Context for regular CLI execution
         */
        fun forCli(easycasslabUserDirectory: File): Context {
            return Context(easycasslabUserDirectory, isMcp = false)
        }

        /**
         * Create a Context for MCP server execution
         */
        fun forMcp(easycasslabUserDirectory: File): Context {
            return Context(easycasslabUserDirectory, isMcp = true)
        }
    }

    val log = KotlinLogging.logger {}

    /**
     * Profile setup.  User can override the default profile using a env var.
     * Long term, should probably make this something they can do via a command.
     * Will be useful once multiple cloud providers are supported.
     */
    var profile = System.getenv("EASY_CASS_LAB_PROFILE") ?: "default"
    var profilesDir = File(easycasslabUserDirectory, "profiles")
    var profileDir = File(profilesDir, profile)

    init {
        profileDir.mkdirs()
    }

    val cwdPath = System.getProperty("user.dir")
    val home = File(System.getProperty("user.home"))

    val terraformCacheDir = File(easycasslabUserDirectory, "terraform_cache").also { it.mkdirs() }

    /**
     * Version is either supplied by the in-repo script,
     * or the version generated by the application plugin
     */
    val version = System.getProperty("easycasslab.version")?.toInt() ?: 0
    val appHome = System.getProperty("easycasslab.apphome")
    val packerHome = "$appHome/packer/"
    val cassandraVersionsExtra = File(profileDir, "cassandra_versions")

    /**
     * Please use this for reading and writing yaml to objects
     *
     * Example usage:
     *
     * val state = mapper.readValue<MyStateObject>(json)
     */
    val yaml: ObjectMapper by YamlDelegate()

    // if you need to anything funky with the mapper (settings etc) use this
    fun getJsonMapper() = jacksonObjectMapper()
}
